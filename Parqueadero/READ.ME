# üÖøÔ∏è Sistema de Gesti√≥n de Parqueaderos

## Descripci√≥n General
Sistema b√°sico de administraci√≥n de parqueaderos desarrollado en Python que simula el funcionamiento de un parqueadero real, permitiendo la gesti√≥n eficiente de espacios, control de tiempo de permanencia y c√°lculo de tarifas.

## Requisitos M√≠nimos Cumplidos ‚úÖ

- **‚úÖ Lenguaje de Programaci√≥n:** Python como lenguaje principal
- **‚úÖ Generaci√≥n de Mapa:** Mapa visual 10√ó15 con s√≠mbolos distintivos
- **‚úÖ V√≠as, Entrada y Salida:** Sistema de navegaci√≥n con entrada (E) y salida (S)
- **‚úÖ Registro de Veh√≠culos:** Placa, hora de entrada y espacio asignado
- **‚úÖ Sistema de Cobro:** C√°lculo autom√°tico basado en tiempo de permanencia
- **‚úÖ Sistema de Disponibilidad:** Visualizaci√≥n en tiempo real de espacios

---

## Desarrollos Innovadores Implementados

### üó∫Ô∏è Visualizaci√≥n Mejorada del Mapa

**¬øPara qu√© se implement√≥?**

Se implement√≥ para proporcionar una representaci√≥n visual clara e intuitiva del estado actual del parqueadero en tiempo real. Esta funcionalidad permite a los usuarios identificar r√°pidamente espacios disponibles, ocupados, y la estructura general del parqueadero sin necesidad de navegar por men√∫s adicionales.

**¬øPor qu√© se consider√≥ necesario?**

Un sistema de parqueadero efectivo requiere informaci√≥n visual inmediata y comprensible. En la vida real, los conductores necesitan ver de un vistazo d√≥nde pueden estacionarse. La representaci√≥n textual b√°sica o listados simples no proporcionan la contextualizaci√≥n espacial necesaria para una experiencia de usuario efectiva. Adem√°s, para prop√≥sitos de demostraci√≥n y educaci√≥n, la visualizaci√≥n gr√°fica hace que el sistema sea m√°s comprensible y atractivo.

**¬øC√≥mo se llev√≥ a cabo su implementaci√≥n?**

- **Sistema de s√≠mbolos distintivos:** Se cre√≥ un conjunto de caracteres √∫nicos para representar cada elemento del parqueadero:
  - `P`: Espacio libre disponible
  - `X`: Espacio ocupado por un veh√≠culo
  - `E`: Entrada del parqueadero
  - `S`: Salida del parqueadero
  - `~`: V√≠as de circulaci√≥n
  
- **Matriz bidimensional:** Se implement√≥ una estructura de datos de matriz 10√ó15 que representa f√≠sicamente la distribuci√≥n del parqueadero, permitiendo actualizaci√≥n y consulta eficiente del estado.

- **Funci√≥n de visualizaci√≥n:** Se desarroll√≥ el m√©todo `display_map()` que:
  - Itera sobre toda la matriz del parqueadero
  - Renderiza cada s√≠mbolo con espaciado apropiado
  - Se ejecuta autom√°ticamente despu√©s de cada operaci√≥n (ingreso/salida)
  - Incluye informaci√≥n adicional como conteo de espacios disponibles

### üìç Ruta Simplificada del Veh√≠culo

**¬øPara qu√© se implement√≥?**

Se implement√≥ para simular de manera visual el recorrido que debe realizar un veh√≠culo desde la entrada hasta su espacio de parqueo asignado. Esta funcionalidad proporciona una experiencia m√°s realista y educativa, mostrando el flujo l√≥gico de movimiento dentro del parqueadero.

**¬øPor qu√© se consider√≥ necesario?**

En un parqueadero real, los veh√≠culos no aparecen m√°gicamente en los espacios asignados; deben seguir rutas espec√≠ficas a trav√©s de las v√≠as de circulaci√≥n. Esta funcionalidad era necesaria para:
- Hacer el sistema m√°s realista y cre√≠ble
- Proporcionar valor educativo sobre planificaci√≥n urbana y dise√±o de parqueaderos
- Mejorar la comprensi√≥n del usuario sobre c√≥mo funciona la asignaci√≥n de espacios
- Demostrar que el sistema considera la accesibilidad de los espacios

**¬øC√≥mo se llev√≥ a cabo su implementaci√≥n?**

- **Algoritmo de marcado de ruta:** Se desarroll√≥ una funci√≥n que calcula y marca visualmente el camino desde la entrada (E) hasta el espacio asignado:
  - Identifica las coordenadas de la entrada del parqueadero
  - Calcula las coordenadas del espacio de destino
  - Marca temporalmente el camino con asteriscos (`*`)

- **Sistema de coordenadas:** Se implement√≥ un sistema que:
  - Utiliza las coordenadas (fila, columna) de la matriz
  - Calcula la ruta m√°s directa disponible
  - Respeta las v√≠as existentes cuando es posible

- **Visualizaci√≥n temporal:** La ruta se muestra durante el proceso de ingreso y luego se limpia, manteniendo el mapa principal libre de elementos temporales que puedan causar confusi√≥n.

### üí∞ C√°lculo de Tarifas Preciso

**¬øPara qu√© se implement√≥?**

Se implement√≥ para proporcionar un sistema de cobro exacto y autom√°tico basado en el tiempo real de permanencia del veh√≠culo en el parqueadero. Esta funcionalidad calcula autom√°ticamente el monto a pagar considerando la duraci√≥n exacta de la estancia.

**¬øPor qu√© se consider√≥ necesario?**

La precisi√≥n en el cobro es fundamental para cualquier sistema comercial real. Un c√°lculo inexacto podr√≠a resultar en:
- P√©rdidas econ√≥micas para el operador del parqueadero
- Insatisfacci√≥n y disputas con los clientes
- Problemas de credibilidad del sistema
- Dificultades en la contabilidad y auditor√≠a

Adem√°s, para que el sistema sea aplicable en la vida real, debe manejar dinero de manera precisa y confiable.

**¬øC√≥mo se llev√≥ a cabo su implementaci√≥n?**

- **M√≥dulo datetime de Python:** Se utiliz√≥ la librer√≠a est√°ndar `datetime` para:
  - Registrar timestamp exactos al momento del ingreso
  - Capturar el tiempo exacto de salida
  - Calcular la diferencia temporal con precisi√≥n de segundos

- **Sistema de c√°lculo:** Se implement√≥ una f√≥rmula que:
  - Convierte la diferencia de tiempo a minutos (incluyendo fracciones)
  - Aplica la tarifa configurable por minuto
  - Redondea apropiadamente para evitar fracciones de centavo
  - Maneja casos especiales (permanencia menor a 1 minuto)

- **Tarifa configurable:** El sistema permite ajustar f√°cilmente la tarifa por minuto seg√∫n las necesidades del negocio, haciendo el sistema adaptable a diferentes contextos econ√≥micos.

### ‚öôÔ∏è Interfaz de Consola Interactiva

**¬øPara qu√© se implement√≥?**

Se implement√≥ para crear una experiencia de usuario fluida, profesional e intuitiva que permita la interacci√≥n efectiva con todas las funcionalidades del sistema sin requerir conocimientos t√©cnicos por parte del usuario.

**¬øPor qu√© se consider√≥ necesario?**

Un sistema sin interfaz amigable es pr√°cticamente inutilizable en contextos reales. Los operadores de parqueaderos, clientes, y administradores necesitan poder usar el sistema sin capacitaci√≥n t√©cnica extensa. Una interfaz bien dise√±ada es crucial para:
- Reducir errores de usuario
- Aumentar la eficiencia operacional
- Facilitar la adopci√≥n del sistema
- Proporcionar una experiencia profesional
- Permitir la demostraci√≥n efectiva de todas las funcionalidades

**¬øC√≥mo se llev√≥ a cabo su implementaci√≥n?**

- **Men√∫ numerado intuitivo:** Se dise√±√≥ un sistema de men√∫ que:
  - Presenta opciones claras y descriptivas
  - Utiliza numeraci√≥n simple para la selecci√≥n
  - Agrupa funcionalidades relacionadas l√≥gicamente
  - Incluye opci√≥n de salida clara

- **Sistema de validaci√≥n robusto:** Se implementaron validaciones para:
  - Prevenir entradas vac√≠as o inv√°lidas en las placas
  - Manejar selecciones de men√∫ fuera de rango
  - Validar que los veh√≠culos existan antes de intentar sacarlos
  - Proporcionar mensajes de error claros y √∫tiles

- **Bucle principal inteligente:** Se desarroll√≥ un sistema que:
  - Mantiene el programa ejecut√°ndose hasta que el usuario decida salir
  - Regresa autom√°ticamente al men√∫ principal despu√©s de cada operaci√≥n
  - Maneja excepciones y errores sin causar crashes del sistema

- **Mensajes informativos:** Se incluyeron mensajes que:
  - Confirman acciones exitosas
  - Explican errores de manera comprensible
  - Gu√≠an al usuario a trav√©s de procesos complejos
  - Proporcionan informaci√≥n contextual relevante

---

## Arquitectura del Sistema

```python
class ParkingLot:
    def __init__(self, rows, cols, rate_per_minute)
    def display_map(self)
    def find_available_spot(self)
    def park_vehicle(self, license_plate)
    def remove_vehicle(self, license_plate)
    def calculate_fee(self, entry_time)
    def show_availability(self)
```

## Tecnolog√≠as Utilizadas

- **Python 3.x:** Lenguaje principal de desarrollo
- **datetime:** M√≥dulo para gesti√≥n precisa de fechas y horas
- **Estructuras de datos nativas:** Listas, diccionarios y matrices para gesti√≥n eficiente de informaci√≥n

## Conclusi√≥n

Este sistema de gesti√≥n de parqueaderos demuestra una implementaci√≥n s√≥lida que excede los requisitos b√°sicos a trav√©s de desarrollos innovadores que aportan valor real. Cada funcionalidad fue dise√±ada considerando aplicaciones del mundo real, resultando en un sistema robusto, user-friendly y t√©cnicamente s√≥lido que podr√≠a servir como base para implementaciones comerciales.
